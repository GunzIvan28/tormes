#! /bin/bash

VERSION="1.0"

TORMES=$0
while [ -h "$TORMES" ]; do # resolve $TORMES until the file is no longer a symlink
  TORMESDIR="$( cd -P "$( dirname "$0" )" && pwd )"
  TORMES="$(readlink "$TORMES")"
  [[ $TORMES != /* ]] && TORMES="$TORMESDIR/$TORMES" # if $TORMES is a symlink, resolve it relative to the path where the symlink file was located
done
TORMESDIR="$( cd -P "$( dirname "$TORMES" )" && pwd )"

TORMESREPORT=$TORMESDIR/tormes-report

# VARIABLES
ADAPTERS="$TORMESDIR/../files/adapters.fa"
ASSEMBLER="spades"
CONFIG="$TORMESDIR/../files/config_file.txt"
CPUS=1
DATE="$( date +"%Y-%m-%d" )"
DOMLST=1
DOPANGENOME=1
FAST=1
FILTERING="prinseq"
#FIRSTBASE=0
GENERA=
METADATA=
MINLEN=125
OUTPUT=
OUTWD=
QUALITY=25
REFERENCE=
SAMPLE=
TAB="$(printf '\t')"
TITLEFILE=
TITLE=

ARGPARSED0=$0
ALLARGSPARSED=$@

usage () {
cat << EOF

This is TORMES  version $VERSION
Developed by Narciso M. Quijada <https://github.com/nmquijada/tormes>

usage: $0 <options>

OBLIGATORY OPTIONS:
	-m/--metadata	Path to the file with the metadata regarding the samples
			The file must have an specific organization for the program to work
			If you don't have any or you would like to have an example or extra information, 
			please type: 
			$0 example-metadata
	-o/--output	Path and name of the output directory

OTHER OPTIONS:
	-a/--adapter	Path to the adapters file
			(default="$ADAPTERS")
	--assembler	Select the assembler to use. Options available: 'spades', 'megahit'
			(default='$ASSEMBLER')
        -c/--config     Path to the configuration file with the location of all dependencies
                        (default="$CONFIG")
	--citation	Show citation
	--fast		Faster analysis (default='0')
			('megahit' is used as assembler and contig ordering and pangenome analysis are disabled)
	--filtering	Select the software for filtering the reads.
			Options available: 'prinseq', 'sickle', 'trimmomatic'
			(default="$FILTERING")
	-g/--genera	Type genera name to allow special analysis (default='none')
			Options available: 'Escherichia', 'Salmonella'
	-h/--help	Show this help
	--min_len	Minimum length to the reads to survive after filtering (default=$MINLEN) <integer>
	--no_mlst	Disable MLST analysis (default='0')
	--no_pangenome	Disable pangenome analysis (default='0')
	-q/--quality	Minimum mean phred score of the reads to survive after filtering (default=$QUALITY) <integer>
	-r/--reference	Type path to reference genome (fasta, gbk) (default='none')
			Reference will be used for contig ordering of the draft genome
	-t/--threads	Number of threads to use (default=$CPUS) <integer>
	--title		Path to a file containing the title in the project that will be used as title in the report
			Avoid using special characters. TORMES will perform a default title if this option is not used
	-v/--version	Show version


For further explanation please visit: https://github.com/nmquijada/tormes

EOF
}

if [ $# == 0 ]; then
	usage
	exit 1
fi

# GENERATING EXAMPLE METADATA FILE IF NEEDED

if [ "$1" == "example-metadata" ]
then
cat << EOF > samples_metadata.txt
Samples${TAB}Read1${TAB}Read2${TAB}Description${TAB}Use_as_many_descrpition_colums_as_wanted
Sample1${TAB}Directory1/S1_R1.fastq.gz${TAB}Directory1/S1_R2.fastq.gz${TAB}E.coli isolated in 2018${TAB}Colistin resistant
EOF

cat << EOF

An example "samples_metadata.txt" has been created in the current directory
Modify it in your preferred text editor by respecting the organization of the example:
	- Columns must be tab separated
	- First column must me called "Samples" and harbor samples names (avoid special characters)
	- Second column must be called "Read1" and harbor the path to the R1 read (either fastq or fastq.gz)
	- Third column must be called "Read2" and harbor the path to the R2 read (either fastq or fastq.gz)
	- Fourth (and so on) columns are descriptive. They are no needed for the program but the information will appear in the report
	  Add as much as you want.


EOF
        exit 1
fi


# VARIABLE OPTIONS

POSITIONAL=()
while [[ $# -gt 0 ]]
do
ARGS="$1"

case $ARGS in
        -a|--adapter)
            if [ "$2" ]; then
                ADAPTER=$2
                shift 2
                if [ ! -e "$ADAPTER" ]
                    then echo -e "\nERROR: $ADAPTER doesn't exist! Please check \n"
                    exit 1
                fi
                if [ ! -s "$ADAPTER" ]
                    then echo -e "\nERROR: Size of $ADAPTER is 0! Please check \n"
                    exit 1
                fi
            else
                echo -e '\nERROR: "-a/--adapter" requires an argument\n'
                exit 1
            fi
            ;;
        --assembler)
            if [ "$2" ]; then
                if [ $2 == 'spades' ] || [ $2 == 'megahit' ]; then
		ASSEMBLER=$2
                shift 2
		else
		    echo -e '\nERROR: unknown option for "--assembler"'
		    echo 'Options available: "spades" and "megahit"'
		    echo -e "argument parsed: $2 \n"
		    exit 1
		fi
            else
                echo -e '\nERROR: "--assembler" requires an argument\n'
                echo 'Options available: "spades" and "megahit"'
                echo -e 'Default option: "spades" \n'
                exit 1
            fi
            ;;
        --citation)
            echo -e "\n If using TORMES, please cite:"
	    echo -e "\n Quijada, N.M., Rodriguez-Lazaro, D., Hernandez, M. TORMES. (2018) GitHub (https://github.com/nmquijada/tormes/)\n"
            exit 1
            ;;
	-c|--config)
	    if [ "$2" ]; then
                CONFIG=$2
                shift 2
                if [ ! -e "$CONFIG" ]
                    then echo -e "\nERROR: $CONFIG doesn't exist! Please check \n"
                    exit 1
                fi
                if [ ! -s "$CONFIG" ]
                    then echo -e "\nERROR: Size of $CONFIG is 0! Please check \n"
                    exit 1
                fi
            else
                echo -e '\nERROR: "-c/--config" requires an argument\n'
                exit 1
            fi
            ;;
	--fast)
	    FAST=0
	    FILTERING="trimmomatic"
	    DOPANGENOME=0
	    ASSEMBLER="megahit"
	    shift
	    ;;
        --filtering)
            if [ "$2" ]; then
                if [ $2 == 'prinseq' ] || [ $2 == 'sickle' ] || [ $2 == 'trimmomatic' ]; then
                FILTERING=$2
                shift 2
                else
                    echo -e '\nERROR: unknown option for "--filtering"'
                    echo 'Options available: "prinseq", "sickle" and "trimmomatic"'
                    echo -e "argument parsed: $2 \n"
                    exit 1
                fi
            else
                echo -e '\nERROR: "--filtering" requires an argument\n'
                echo 'Options available: "prinseq", "sickle" and "trimmomatic"'
                echo -e 'Default option: "prinseq" \n'
                exit 1
            fi
            ;;

	-g|--genera)
	    if [ "$2" ]; then
		if [ $2 == 'Escherichia' ] || [ $2 == 'Salmonella' ]; then
		    GENERA=$2
		    shift 2
		    else
			echo -e '\nERROR: unknown option for "-g/--genera"'
			echo 'Genera available: Escherichia, Salmonella'
			echo 'avoid the "-g/--genera" option if your genera is not available'
			echo -e "argument parsed: $2 \n"
			exit 1
	        fi
            else
                echo -e '\nERROR: "-g/--genera" requires an argument'
		echo -e 'options available: Escherichia, Salmonella\n'
		echo -e 'avoid the "-g/--genera" option if your genera is not available \n'
		exit 1
            fi
	    ;;
	-h|-\?|--help)
	    usage
	    exit 1
	    ;;
	-m|--metadata)
	    if [ "$2" ]; then
                METADATA=$2
                shift 2
                if [ ! -e "$METADATA" ]
                    then echo -e "\nERROR: $METADATA doesn't exist! Please check \n"
                    exit 1
                fi
                if [ ! -s "$METADATA" ]
                    then echo -e "\nERROR: Size of $METADATA is 0! Please check \n"
                    exit 1
                fi
            else
                echo -e '\nERROR: "-m/--metadata" requires an argument\n'
                exit 1
            fi
            ;;
        --min_len)
            if [ "$2" ]; then
                if [ "$2" -eq "$2"  ] 2>/dev/null ; then
                    MINLEN=$2
                    shift 2
                else
                        echo -e '\nERROR: "--min_len" requires a numeric argument'
                        echo -e "argument parsed: $2 \n"
                        exit 1
                fi
            else
                echo -e '\nERROR: "--min_len" requires a numeric argument\n'
            fi
            ;;
        --no_mlst)
            DOMLST=0
            shift
            ;;
        --no_pangenome)
            DOPANGENOME=0
            shift
            ;;
	-o|--output)
	    if [ "$2" ]; then
                OUTPUT=$2
                shift 2
                if [ -d "$OUTPUT" ]
                    then echo -e "\nERROR: $OUTPUT already exist! Please check \n"
                    exit 1
                fi
            else
                echo -e '\nERROR: "-o/--output" requires an argument\n'
                exit 1
            fi
            ;;
        -q|--quality)
            if [ "$2" ]; then
                if [ "$2" -eq "$2"  ] 2>/dev/null ; then
                    QUALITY=$2
                    shift 2
                else
                        echo -e '\nERROR: "-q/--quality" requires a numeric argument'
                        echo -e "argument parsed: $2 \n"
                        exit 1
                fi
            else
                echo -e '\nERROR: "-q/--quality" requires a numeric argument\n'
            fi
            ;;
	-r|--reference)
	    if [ "$2" ]; then
		REFERENCE=$2
		shift 2
		if [ ! -e "$REFERENCE" ]
		    then echo -e "\nERROR: $REFERENCE doesn't exist! Please check \n"
		    exit 1
		fi
		if [ ! -s "$REFERENCE" ]
		    then echo -e "\nERROR: Size of $REFERENCE is 0! Please check \n"
		    exit 1
		fi
	    else
		echo -e '\nERROR: "-r/--reference" requires an argument\n'
                exit 1
            fi
            ;;
	-t|--threads)
	    if [ "$2" ]; then    
		if [ "$2" -eq "$2"  ] 2>/dev/null ; then
                    CPUS=$2
                    shift 2
                else
                        echo -e '\nERROR: "-t/--threads" requires a numeric argument'
                        echo -e "argument parsed: $2 \n"
                        exit 1
                fi
	    else
		echo -e '\nERROR: "-t/--threads" requires a numeric argument\n'
    	    fi
	    ;;
	--title)
            if [ "$2" ]; then
                TITLEFILE=$2
                shift 2
                if [ ! -e "$TITLEFILE" ]
                    then echo -e "\nERROR: $TITLEFILE doesn't exist! Please check \n"
                    exit 1
                fi
                if [ ! -s "$TITLEFILE" ]
                    then echo -e "\nERROR: Size of $TITLEFILE is 0! Please check \n"
                    exit 1
                fi
            else
                echo -e '\nERROR: "--title" requires an argument'
		echo -e 'Avoid using "--title" if you would like a title by default\n'
                exit 1
            fi
	    ;;
	-v|--version)
	    echo "TORMES version $VERSION"
	    exit 1
	    ;;
	-?*)
	    echo -e "\nERROR: unknown option: $1 \n"
	    usage
	    exit 1
	    ;;
	*)
	    echo -e "\nERROR: unknown option: $1 \n"
            usage
            exit 1
            ;;
esac
done
set -- "${POSITIONAL[@]}" #restore positional parameters

# CHECK OBLIGATORY VARIABLES
if [ -z "$OUTPUT" ] || [ -z "$METADATA" ]; then
	echo ""
	if [ -z "$METADATA" ]; then
           echo 'ERROR: "-m/--metadata" option is needed!'
        fi
	if [ -z "$OUTPUT" ]; then
	   echo 'ERROR: "-o/--output" option is needed!'
	fi
	echo ""
	exit 1
fi

# CHECK REDUNDANT OPTIONS
if [ "$ASSEMBLER" == 'spades' ] && [ "$FAST" -eq "0" ]; then
	echo -e '\nERROR "--fast" option cannot be used with --asembler spades\n'
	exit 1
fi
if [ "$FAST" -eq "0" ] && [ -n "$REFERENCE" ]; then
        echo -e '\nERROR "--fast" option cannot be used with a reference\n'
	exit 1
fi
if [ "$FILTERING" == 'sickle' ] && [ "$FAST" -eq "0" ]; then
        echo -e '\nERROR "--fast" option uses "trimmomatic" by default and cannot be used with --filtering sickle\n'
        exit 1
fi
if [ "$FILTERING" == 'prinseq' ] && [ "$FAST" -eq "0" ]; then
        echo -e '\nERROR "--fast" option uses "trimmomatic" by default and cannot be used with --filtering prinseq\n'
        exit 1
fi

# CHECK METADATA FORMAT
## Number of colums
head -n 1 $METADATA > temp1
read NCOL <<< $(awk -F "$TAB" '{print NF}' temp1 | sort -nu | tail -n 1)
if [ $NCOL -lt "3" ]; then
	echo -e "\nERROR: $METADATA format is incorrect (number of columns < 3), please check"
	echo -e "Type: '$0 example-metadata' for extra information\n"
	rm -f temp1
	exit 1
fi
rm -f temp1
read HEADER <<< $(head -n 1 $METADATA | cut -d "$TAB" -f 1)
if [ $HEADER != "Samples" ]; then
	echo -e "\nERROR: $METADATA format is incorrect (First raw first column should be 'Samples'), please check"
        echo -e "Type: '$0 example-metadata' for extra information\n"
        exit 1
fi
read HEADER <<< $(head -n 1 $METADATA | cut -d "$TAB" -f 2)
if [ $HEADER != "Read1" ]; then
        echo -e "\nERROR: $METADATA format is incorrect (First raw second column should be 'Read1'), please check"
        echo -e "Type: '$0 example-metadata' for extra information\n"
        exit 1
fi
read HEADER <<< $(head -n 1 $METADATA | cut -d "$TAB" -f 3)
if [ $HEADER != "Read2" ]; then
        echo -e "\nERROR: $METADATA format is incorrect (First raw third column should be 'Read2'), please check"
        echo -e "Type: '$0 example-metadata' for extra information\n"
        exit 1
fi

## Samples names and files are unique
duplicate_check() {
	{ sort | uniq -d | grep . -qc; } < "$1"
}

tail -n +2 $METADATA > temp1
cut -f 1 -d "$TAB" temp1 > temp2
if duplicate_check temp2; then
	echo -e "\nERROR: some samples names are equal! Please check\n"
	rm -f temp2
	exit 1
fi
rm -f temp2
for i in 2 3; do
	cut -f $i -d "$TAB" temp1 > temp2
	if duplicate_check temp2; then
            echo -e "\nERROR: some reads are equal in different samples! Please check\n"
            rm -f temp2
            exit 1
	fi
done

## There are no empty fields
for i in $(seq 1 $NCOL); do
	cut -f $i -d "$TAB" $METADATA > temp$i
	read TEMP1 <<< $(grep -cvE '[^[:space:]]' temp$i)
	if [ $TEMP1 -gt "0" ]; then
	    echo -e "\nERROR: Some fields in $METADATA are blank! Please check\n"
	    rm -f temp$i
	    exit 1
	fi
	rm -f temp$i
done

## Check that reads files exist and aren't empty
tail -n +2 $METADATA > temp1
cut -f 2 -d "$TAB" temp1 > temp2
for i in $(<temp2); do
	if [ ! -e "$i" ]
	    then echo -e "\nERROR: $i doesn't exist! Please check \n"
    	    rm -f temp1 temp2
            exit 1
        fi
        if [ ! -s "$i" ]
            then echo -e "\nERROR: $i is empty! Please check \n"
	    rm -f temp1 temp2
            exit 1
        fi
done
rm -f temp1 temp2
tail -n +2 $METADATA > temp1
cut -f 3 -d "$TAB" temp1 > temp2
for i in $(<temp2); do
        if [ ! -e "$i" ]
            then echo -e "\nERROR: $i doesn't exist! Please check \n"
            rm -f temp1 temp2
            exit 1
        fi
        if [ ! -s "$i" ]
            then echo -e "\nERROR: $i is empty! Please check \n"
            rm -f temp1 temp2
            exit 1
        fi
done
rm -f temp1 temp2

# CHECK DEPENDENCIES

ABRICATE="$( grep -w "^ABRICATE\s" $CONFIG | cut -f 2 -d "$TAB" )"
#BLAST26="$( grep -w "^BLAST-2\.2\.26\s" $CONFIG | cut -f 2 -d "$TAB" )"
BLASTBINS="$( grep -w "^BLAST-2\.6_or_later-BINARIES\s" $CONFIG | cut -f 2 -d "$TAB" )"
CONVERT="$( grep -w "^CONVERT\s" $CONFIG | cut -f 2 -d "$TAB" )"
FASTTREE="$( grep -w "^FASTTREE\s" $CONFIG | cut -f 2 -d "$TAB" )"
FIMTYPER="$( grep -w "^FIMTYPER\s" $CONFIG | cut -f 2 -d "$TAB" )"
FIMTYPERDB="$( grep -w "^FIMTYPER-DATABASE\s" $CONFIG | cut -f 2 -d "$TAB" )"
KRAKEN="$( grep -w "^KRAKEN\s" $CONFIG | cut -f 2 -d "$TAB" )"
KRAKENREPORT="$( grep -w "^KRAKEN-REPORT\s" $CONFIG | cut -f 2 -d "$TAB" )"
KRAKENDB="$( grep -w "^KRAKEN-DATABASE\s" $CONFIG | cut -f 2 -d "$TAB" )"
MEGAHIT="$( grep -w "^MEGAHIT\s" $CONFIG | cut -f 2 -d "$TAB" )"
MAUVE="$( grep -w "^MAUVE\s" $CONFIG | cut -f 2 -d "$TAB" )"
MAUVEBINS="$( grep -w "^MAUVE-BINARIES\s" $CONFIG | cut -f 2 -d "$TAB" )"
MLST="$( grep -w "^MLST\s" $CONFIG | cut -f 2 -d "$TAB" )"
PARALLEL="$( grep -w "^PARALLEL\s" $CONFIG | cut -f 2 -d "$TAB" )"
POINTFINDER="$( grep -w "^POINTFINDER\s" $CONFIG | cut -f 2 -d "$TAB" )"
POINTFINDERDB="$( grep -w "^POINTFINDER-DATABASE\s" $CONFIG | cut -f 2 -d "$TAB" )"
PRINSEQ="$( grep -w "^PRINSEQ\s" $CONFIG | cut -f 2 -d "$TAB" )"
PROKKA="$( grep -w "^PROKKA\s" $CONFIG | cut -f 2 -d "$TAB" )"
QUAST="$( grep -w "^QUAST\s" $CONFIG | cut -f 2 -d "$TAB" )"
ROARY="$( grep -w "^ROARY\s" $CONFIG | cut -f 2 -d "$TAB" )"
ROARY2SVG="$( grep -w "^ROARY2SVG\s" $CONFIG | cut -f 2 -d "$TAB" )"
RSCRIPT="$( grep -w "^RSCRIPT\s" $CONFIG | cut -f 2 -d "$TAB" )"
SEROTYPEFINDER="$( grep -w "^SEROTYPEFINDER\s" $CONFIG | cut -f 2 -d "$TAB" )"
SEROTYPEFINDERDB="$( grep -w "^SEROTYPEFINDER-DATABASE\s" $CONFIG | cut -f 2 -d "$TAB" )"
SICKLE="$( grep -w "^SICKLE\s" $CONFIG | cut -f 2 -d "$TAB" )"
SISTR="$( grep -w "^SISTR\s" $CONFIG | cut -f 2 -d "$TAB" )"
SPADES="$( grep -w "^SPADES\s" $CONFIG | cut -f 2 -d "$TAB" )"
TRIMMOMATIC="$( grep -w "^TRIMMOMATIC\s" $CONFIG | cut -f 2 -d "$TAB" )"

# Mirar que pasa con Mauve.jar
for i in $ABRICATE $CONVERT $FASTTREE $KRAKEN $KRAKENREPORT $MEGAHIT $MLST $PARALLEL $PRINSEQ $PROKKA $QUAST $ROARY $ROARY2SVG $SICKLE $SPADES $TRIMMOMATIC; do
        if command -v $i >/dev/null 2>&1 ; then
            echo "Software: $i found"
#            echo -e "Version is: \c"
#            $i -v
        else
            echo -e "\nERROR: Software $i not found! Please check if:"
	    echo -e "\t * Software is not installed"
	    echo -e "\t * Software is installed but the path in $CONFIG is incorrect\n"
	    exit 1
        fi
done
if [ -s $MAUVE ]; then 
	echo "Software: $MAUVE found"
else
	echo -e "\nERROR: Software $MAUVE not found! Please check if:"
        echo -e "\t * Software is not installed"
        echo -e "\t * Software is installed but the path in $CONFIG is incorrect\n"
        exit 1
fi
if command -v $MAUVEBINS/progressiveMauve >/dev/null 2>&1 ; then
        echo "Binaries for MAUVE found"
	export PATH=$MAUVEBINS:$PATH
else
        echo -e "\nERROR: Binaries for MAUVE not found! Please check if:"
        echo -e "\t * Binaries are not installed"
        echo -e "\t * Binaries are installed but the path in $CONFIG is incorrect\n"
        exit 1
fi

if [ "$GENERA" == 'Escherichia' ]; then
	for i in $FIMTYPER $SEROTYPEFINDER; do
	    if command -v $i >/dev/null 2>&1 ; then
		echo "Software: $i found"
	    else
            echo -e "\nERROR: Software $i required when -g/--genera \'$GENERA\' is enabled not found! Please check if:"
            echo -e "\t * Software is not installed"
            echo -e "\t * Software is installed but the path in $CONFIG is incorrect\n"
            exit 1
            fi
	done
#	if command -v $BLAST26/bin/blastall >/dev/null 2>&1 ; then
#            echo "Binaries for BLAST version 2.2.26 found"
#	else
#            echo -e "\nERROR: Binaries for BLAST version 2.2.26 required when -g/--genera \'$GENERA\' not found! Please check if:"
#            echo -e "\t * Binaries are not installed"
#            echo -e "\t * Binaries are installed but the path in $CONFIG is incorrect"
#            echo -e "\t   (it should be the path to blast-2.2.26 main folder, where 'bin' directory is placed)\n" 
#            exit 1
#	fi
	if command -v $BLASTBINS/blastn >/dev/null 2>&1 ; then
            echo "Binaries for BLAST version 2.6 or later found"
	else
            echo -e "\nERROR: Binaries for BLAST version 2.6 or later required when -g/--genera \'$GENERA\' not found! Please check if:"
            echo -e "\t * Binaries are not installed"
            echo -e "\t * Binaries are installed but the path in $CONFIG is incorrect"
            echo -e "\t   (it should be the path to blast-2.6 (or later)  main folder, where 'bin' directory is placed)\n" 
            exit 1
	fi
	if [ -s $POINTFINDER ]; then
            echo "Software: $POINTFINDER found"
	else
            echo -e "\nERROR: Software $POINTFINDER not found! Please check if:"
            echo -e "\t * Software is not installed"
            echo -e "\t * Software is installed but the path in $POINTFINDER is incorrect\n"
            exit 1
	fi
fi

if [ "$GENERA" == 'Salmonella' ]; then
	if command -v $SISTR >/dev/null 2>&1 ; then
            echo "Software: $SISTR found"
        else
            echo -e "\nERROR: Sotware $SISTR required when -g/--genera \'$GENERA\' not found! Please check if:"
            echo -e "\t * Software is not installed"
            echo -e "\t * Software is installed but the path in $CONFIG is incorrect \n"
            exit 1
        fi
        if [ -s $POINTFINDER ]; then
            echo "Software: $POINTFINDER found"
        else
            echo -e "\nERROR: Software $POINTFINDER not found! Please check if:"
            echo -e "\t * Software is not installed"
            echo -e "\t * Software is installed but the path in $POINTFINDER is incorrect\n"
            exit 1
        fi
fi

# START WORKING
## CREATE WORKING DIRECTORY AND CREATE SAMPLES VARIABLE

mkdir -p $OUTPUT
if [ ! -d $OUTPUT ]; then
	echo -e "\nERROR: $OUTPUT could not be created in the selected directory\n"
	exit 1
fi

OUTEMP="$( cd -P "$( dirname "$OUTPUT" )" && pwd )"
OUTWD="$OUTEMP/$OUTPUT"
SAMPLE="$( tail -n +2 $METADATA | cut -f 1 -d "$TAB" )"
tail -n +2 $METADATA | cut -f 1 -d "$TAB" > $OUTWD/list.tmp

cat << EOF

Thanks for using tormes version $VERSION
Status can be shown in "$OUTWD/tormes.log"

EOF

cat << EOF >> $OUTWD/tormes.log

This is tormes version $VERSION

Script used:
$ARGPARSED0 $ALLARGSPARSED

Parameters set:
	- Metadata file: $METADATA
	- Output directory: $OUTPUT
	- Number of threads to use: $CPUS
EOF

if [ ! -z $REFERENCE ]; then
        echo -e "$TAB- Reference used: $REFERENCE \n" >> $OUTWD/tormes.log
fi
if [ ! -z $GENERA ]; then
	echo -e "$TAB- Special analysis enabled for: $GENERA \n" >> $OUTWD/tormes.log
else
	echo "" >> $OUTWD/tormes.log
fi

echo -e "TORMES pipeline started at: \c" >> $OUTWD/tormes.log
date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
echo ""

mkdir -p $OUTWD/Raw_reads
for i in $SAMPLE; do
        DIRR1="$( grep -w "^$i" $METADATA | cut -f 2 -d "$TAB" )"
        DIRR2="$( grep -w "^$i" $METADATA | cut -f 3 -d "$TAB" )"
	if [[ $DIRR1 =~ \.gz$ ]]; then
	    cp -f $DIRR1 $OUTWD/Raw_reads/$i\_R1.fastq.gz
	else
	    cp -f $DIRR1 $OUTWD/Raw_reads/$i\_R1.fastq
	fi
	if [[ $DIRR2 =~ \.gz$ ]]; then
            cp -f $DIRR2 $OUTWD/Raw_reads/$i\_R2.fastq.gz
        else
            cp -f $DIRR2 $OUTWD/Raw_reads/$i\_R2.fastq
        fi
done

$PARALLEL -j $CPUS --gnu gzip ::: $OUTWD/Raw_reads/*fastq 

## QUALITY FILTERING AND ADAPTER TRIMMING

echo -e "Quality filtering process started at: \c" >> $OUTWD/tormes.log
date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log

mkdir -p $OUTWD/cleaned_reads

if [ "$FILTERING" == 'trimmomatic' ]; then
	for i in $SAMPLE; do
		$TRIMMOMATIC PE -threads $CPUS -phred33 $OUTWD/Raw_reads/$i\_R1.fastq.gz $OUTWD/Raw_reads/$i\_R2.fastq.gz $OUTWD/cleaned_reads/$i\.ok_1.fastq.gz /dev/null $OUTWD/cleaned_reads/$i\.ok_2.fastq.gz /dev/null ILLUMINACLIP:$ADAPTERS:1:30:11 LEADING:${QUALITY} TRAILING:${QUALITY} MINLEN:${MINLEN}
	done
else
	for i in $SAMPLE; do
		$TRIMMOMATIC PE -threads $CPUS -phred33 $OUTWD/Raw_reads/$i\_R1.fastq.gz $OUTWD/Raw_reads/$i\_R2.fastq.gz $OUTWD/cleaned_reads/$i\.noadapt.R1.fastq.gz /dev/null $OUTWD/cleaned_reads/$i\.noadapt.R2.fastq.gz /dev/null ILLUMINACLIP:$ADAPTERS:1:30:11
	done
fi

$PARALLEL -j $CPUS --gnu rm -rf ::: $OUTWD/Raw_reads/

if [ "$FILTERING" == 'prinseq' ]; then
	$PARALLEL -j $CPUS --gnu gzip -d ::: $OUTWD/cleaned_reads/*gz

	$PARALLEL -j $CPUS -a $OUTWD/list.tmp $PRINSEQ -verbose -fastq $OUTWD/cleaned_reads/{}.noadapt.R1.fastq -fastq2 $OUTWD/cleaned_reads/{}.noadapt.R2.fastq -out_good $OUTWD/cleaned_reads/{}.ok -out_format 3 -out_bad null -min_len $MINLEN -min_qual_mean $QUALITY -trim_qual_right $QUALITY -trim_qual_window 15 -trim_qual_type mean

	$PARALLEL -j $CPUS --gnu rm -f ::: $OUTWD/cleaned_reads/*singletons*
	$PARALLEL -j $CPUS --gnu rm -rf ::: $OUTWD/cleaned_reads/*noadapt*
	$PARALLEL -j $CPUS --gnu gzip ::: $OUTWD/cleaned_reads/*fastq
fi
if [ "$FILTERING" == 'sickle' ]; then
	$PARALLEL -j $CPUS -a $OUTWD/list.tmp $SICKLE pe -g -f $OUTWD/cleaned_reads/{}.noadapt.R1.fastq.gz -r $OUTWD/cleaned_reads/{}.noadapt.R2.fastq.gz -o $OUTWD/cleaned_reads/{}.ok_1.fastq.gz -p $OUTWD/cleaned_reads/{}.ok_2.fastq.gz -s $OUTWD/cleaned_reads/{}.single.fastq.gz -t sanger -l $MINLEN -q $QUALITY
	$PARALLEL -j $CPUS --gnu rm -f ::: $OUTWD/cleaned_reads/*single*
	$PARALLEL -j $CPUS --gnu rm -rf ::: $OUTWD/cleaned_reads/*noadapt*
fi

for i in $SAMPLE; do
	zcat $OUTWD/cleaned_reads/$i\.ok_*.fastq.gz | awk 'BEGIN { t=0.0;sq=0.0; n=0;} ;NR%4==2 {n++;L=length($0);t+=L;sq+=L*L;}END{m=t/n;printf("total\tavg\n%d\t%f\n",n,m,sq/n-m*m);}' > $OUTWD/cleaned_reads/$i\.ok.stats
	sed -i 's/\..*//' $OUTWD/cleaned_reads/$i\.ok.stats
#	tail -n +2 $OUTWD/cleaned_reads/$i\.ok.stats >> $OUTWD/sequencing_assembly_report.txt
done

## ASSEMBLY
echo -e "Assembly started at: \c" >> $OUTWD/tormes.log
date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
mkdir -p $OUTWD/assembly
mkdir -p $OUTWD/draft_genomes

ASSEMBLYJOBS=$(echo "${CPUS}/8" | bc)

if [ "$ASSEMBLER" == 'spades' ]; then
	if [ ${ASSEMBLYJOBS} -gt 1 ]; then
		$PARALLEL -j ${ASSEMBLYJOBS} -a $OUTWD/list.tmp $SPADES --careful -1 $OUTWD/cleaned_reads/{}.ok_1.fastq.gz -2 $OUTWD/cleaned_reads/{}.ok_2.fastq.gz -o $OUTWD/assembly/{}_assembly -t 8
	else
		for i in $SAMPLE; do
		     $SPADES --careful -1 $OUTWD/cleaned_reads/$i\.ok_1.fastq.gz -2 $OUTWD/cleaned_reads/$i\.ok_2.fastq.gz -o $OUTWD/assembly/$i\_assembly -t $CPUS
		done
	fi
fi

if [ "$ASSEMBLER" == 'megahit' ]; then
        if [ ${ASSEMBLYJOBS} -gt 1 ]; then
                $PARALLEL -j ${ASSEMBLYJOBS} -a $OUTWD/list.tmp $MEGAHIT -1 $OUTWD/cleaned_reads/{}.ok_1.fastq.gz -2 $OUTWD/cleaned_reads/{}.ok_2.fastq.gz -o $OUTWD/assembly/{}_assembly -t 8
        else
                for i in $SAMPLE; do
		$MEGAHIT -1 $OUTWD/cleaned_reads/$i\.ok_1.fastq.gz -2 $OUTWD/cleaned_reads/$i\.ok_2.fastq.gz -o $OUTWD/assembly/$i\_assembly -t $CPUS
                done
        fi
	for i in $SAMPLE; do
		mv $OUTWD/assembly/$i\_assembly/final.contigs.fa $OUTWD/assembly/$i\_assembly/contigs.fasta
	done
fi

for i in $SAMPLE; do
        if [ ! -e $OUTWD/assembly/$i\_assembly/contigs.fasta ]; then
            echo -e "$TAB-WARNING: $i did not generate an assembly file and will be excluded for further analysis" >> $OUTWD/tormes.log
	    echo "$i" >> $OUTWD/excludinglist.tmp
        fi
done
if [ -e $OUTWD/excludinglist.tmp ]; then
	awk 'NR==FNR{a[$0]=1;next}!a[$0]' $OUTWD/excludinglist.tmp $OUTWD/list.tmp > $OUTWD/list2.tmp
	mv $OUTWD/list2.tmp $OUTWD/list.tmp
	SAMPLE="$(<$OUTWD/list.tmp)"
	rm -f $OUTWD/excludinglist.tmp
fi

$PARALLEL -j $CPUS -a $OUTWD/list.tmp $PRINSEQ -fasta $OUTWD/assembly/{}\_assembly/contigs.fasta -min_len 200 -out_good $OUTWD/draft_genomes/{} -out_bad null

for i in $SAMPLE; do
	if [ ! -e $OUTWD/draft_genomes/${i}.fasta ]; then
		echo -e "$TAB-WARNING: $i assembly did not passed the quality control and will be excluded for further analysis" >> $OUTWD/tormes.log
		echo "$i" >> $OUTWD/excludinglist.tmp
	fi
done
if [ -e $OUTWD/excludinglist.tmp ]; then
        awk 'NR==FNR{a[$0]=1;next}!a[$0]' $OUTWD/excludinglist.tmp $OUTWD/list.tmp > $OUTWD/list2.tmp
        mv $OUTWD/list2.tmp $OUTWD/list.tmp
        SAMPLE="$(<$OUTWD/list.tmp)"
        rm -f $OUTWD/excludinglist.tmp
fi

#parallel -j $CPUS --gnu rm -rf ::: $OUTWD/draft_genomes/1/
$PARALLEL -j $CPUS -a $OUTWD/list.tmp --gnu tar cfz $OUTWD/assembly/{}\_assembly.tgz -C $OUTWD/assembly/ {}\_assembly
$PARALLEL -j $CPUS -a $OUTWD/list.tmp --gnu rm -rf $OUTWD/assembly/{}\_assembly

for i in $SAMPLE; do
	$QUAST $OUTWD/draft_genomes/$i\.fasta -o $OUTWD/assembly/$i\_assembly_stats -t $CPUS --min-contig 200 --no-icarus --silent
done

## SPECIES IDENTIFICATION
echo -e "Species identification started at: \c" >> $OUTWD/tormes.log
date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log

mkdir -p $OUTWD/species_identification/
export KRAKEN_DEFAULT_DB="$KRAKENDB"
for i in $SAMPLE; do
        $KRAKEN --threads $CPUS --db $KRAKENDB --preload --only-classified-output --paired $OUTWD/cleaned_reads/$i\.ok_1.fastq.gz $OUTWD/cleaned_reads/$i\.ok_2.fastq.gz | $KRAKENREPORT > $OUTWD/species_identification/$i\_identification.txt
        grep "S$TAB" $OUTWD/species_identification/$i\_identification.txt | sort -rn | head -n 1 >> $OUTWD/kraken_summary.tmp
done

## SEQUENCING AND ASSSEMBLY REPORT
for i in $SAMPLE; do
	tail -n +2 $OUTWD/cleaned_reads/$i\.ok.stats >> $OUTWD/temp1
	tail -n +2 $OUTWD/assembly/$i\_assembly_stats/transposed_report.tsv | awk -v OFS="$TAB" -F "$TAB" '{print $14,$16,$15,$18,$17}' >> $OUTWD/temp2
done
paste -d "$TAB" $OUTWD/list.tmp $OUTWD/temp1 $OUTWD/temp2 | awk -v OFS="$TAB" -F "$TAB" '{print $0, $9=$2*$3/$5}' | awk -v OFS="$TAB" -F "$TAB" '{gsub(/\..*$/,"X",$9)}1' > $OUTWD/temp3
cut -f 6 -d "$TAB" $OUTWD/kraken_summary.tmp | sed 's/^.*\([A-Z]\)/\1/' > $OUTWD/temp4
cut -f 1 -d "$TAB" $OUTWD/kraken_summary.tmp | sed 's/ //' > $OUTWD/temp5
paste -d "$TAB" $OUTWD/temp3 $OUTWD/temp4 $OUTWD/temp5 > $OUTWD/sequencing_assembly_report.txt
rm -f $OUTWD/temp1 $OUTWD/temp2 $OUTWD/temp3 $OUTWD/temp4 $OUTWD/temp5 $OUTWD/kraken_summary.tmp
sed -i "1iISOLATE${TAB}READS${TAB}AvgReadLen${TAB}CONTIGS${TAB}GenomeLength${TAB}AvgContigLen${TAB}N50${TAB}GC${TAB}DEPTH${TAB}SPECIE${TAB}PercentID" $OUTWD/sequencing_assembly_report.txt

## CONTIG ORDERING
if [ ! -z $REFERENCE ]; then
	echo -e "Contig ordering against reference started at: \c" >> $OUTWD/tormes.log
	date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
	mkdir -p $OUTWD/genome_ordering
	$PARALLEL -a $OUTWD/list.tmp -j $CPUS java -Xmx500m -cp $MAUVE org.gel.mauve.contigs.ContigOrderer -output $OUTWD/genome_ordering/{} -ref $REFERENCE -draft $OUTWD/draft_genomes/{}.fasta
	for i in $SAMPLE; do 
		ls -dt $OUTWD/genome_ordering/$i/* | tail -n +2 | xargs rm -rf
		tr '[:lower:]' '[:upper:]' < $OUTWD/genome_ordering/$i/*/$i.fasta > $OUTWD/genome_ordering/$i.ordered.fasta
		sed -i "s/LENGTH/length/" $OUTWD/genome_ordering/$i.ordered.fasta
		sed -i "s/COV/cov/" $OUTWD/genome_ordering/$i.ordered.fasta
		if [ -s $OUTWD/genome_ordering/$i.ordered.fasta ]; then
		    mv $OUTWD/genome_ordering/$i.ordered.fasta $OUTWD/draft_genomes/$i.fasta
		else
		    echo -e "WARNING: $i genome couldn't be ordered. Not ordered genome will be used instead" >> $OUTWD/tormes.log
		fi
	done
fi
#$PARALLEL -j $CPUS -a $OUTWD/list.tmp --gnu tar cfz $OUTWD/genome_ordering/{}.tgz -C $OUTWD/genome_ordering/ {}
$PARALLEL -j $CPUS -a $OUTWD/list.tmp --gnu rm -rf $OUTWD/genome_ordering/

## MLST
if [ "$DOMLST" -ne "0" ] ; then
	echo -e "MLST started at: \c" >> $OUTWD/tormes.log
	date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
	mkdir -p $OUTWD/mlst
	if [ "$GENERA" == 'Escherichia' ]; then
		$PARALLEL -j $CPUS -a $OUTWD/list.tmp $MLST $OUTWD/draft_genomes/{}\.fasta --scheme ecoli --nopath --quiet > $OUTWD/mlst/mlst-temp-1.tab
		$PARALLEL -j $CPUS -a $OUTWD/list.tmp $MLST $OUTWD/draft_genomes/{}\.fasta --scheme ecoli_2 --nopath --quiet > $OUTWD/mlst/mlst-temp-2.tab
		sed -i 's/\.fasta//' $OUTWD/mlst/mlst-temp-1.tab
		sed -i 's/\.fasta//' $OUTWD/mlst/mlst-temp-2.tab
		sort $OUTWD/mlst/mlst-temp-1.tab > $OUTWD/mlst/mlst-1.tab
		sort $OUTWD/mlst/mlst-temp-2.tab > $OUTWD/mlst/mlst-2.tab
	else
		$PARALLEL -j $CPUS -a $OUTWD/list.tmp $MLST $OUTWD/draft_genomes/{}\.fasta --nopath --quiet > $OUTWD/mlst/mlst-temp.tab
		sed -i 's/\.fasta//' $OUTWD/mlst/mlst-temp.tab
		sort $OUTWD/mlst/mlst-temp.tab > $OUTWD/mlst/mlst.tab
	fi
	rm -f $OUTWD/mlst/mlst-temp*tab
fi

## ANTIBIOTIC RESISTANCE AND VIRULENCE GENES
echo -e "Antibiotic resistance and virulence genes search started at: \c" >> $OUTWD/tormes.log
date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log

mkdir -p $OUTWD/antibiotic_resistance_genes
for i in resfinder card argannot; do
	mkdir -p $OUTWD/antibiotic_resistance_genes/$i
	$PARALLEL -j $CPUS -a $OUTWD/list.tmp --results $OUTWD/antibiotic_resistance_genes/$i/{}\_$i.tab $ABRICATE $OUTWD/draft_genomes/{}.fasta --db $i --nopath
	rm -f $OUTWD/antibiotic_resistance_genes/$i/*err $OUTWD/antibiotic_resistance_genes/$i/*seq
	for j in $SAMPLE; do
		sed -i 's/.fasta//' $OUTWD/antibiotic_resistance_genes/$i/$j\_$i.tab
	done
done

mkdir -p $OUTWD/virulence_genes
$PARALLEL -j $CPUS -a $OUTWD/list.tmp --results $OUTWD/virulence_genes/{}\_vfdb.tab $ABRICATE $OUTWD/draft_genomes/{}.fasta --db vfdb --nopath
rm -f $OUTWD/virulence_genes/*err $OUTWD/virulence_genes/*seq
for i in $SAMPLE; do
	sed -i 's/\.fasta//' $OUTWD/virulence_genes/$i\_vfdb.tab
done

## ANNOTATION
echo -e "Annotation started at: \c" >> $OUTWD/tormes.log
date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
mkdir -p $OUTWD/annotation
for i in $SAMPLE; do
	sed 's/_cov.*//g' $OUTWD/draft_genomes/$i.fasta > $OUTWD/annotation/$i\_prokka.fasta
	sed -i 's/NODE/N/g' $OUTWD/annotation/$i\_prokka.fasta
	if [ ! -z $GENERA ]; then
	    $PROKKA $OUTWD/annotation/$i\_prokka.fasta --outdir $OUTWD/annotation/$i\_annotation --prefix $i --locustag $i --genus $GENERA --usegenus --cpus $CPUS --force
	else
	    $PROKKA $OUTWD/annotation/$i\_prokka.fasta --outdir $OUTWD/annotation/$i\_annotation --prefix $i --locustag $i --cpus $CPUS --force
	fi
	rm -f $OUTWD/annotation/$i\_prokka.fasta
done

## PANGENOME
if [ "$DOPANGENOME" -ne "0" ] ; then
	echo -e "Pangenome analysis started at: \c" >> $OUTWD/tormes.log
	date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
	mkdir -p $OUTWD/gff
	ln -s $OUTWD/annotation/*/*gff $OUTWD/gff/
	$ROARY -e -n -f $OUTWD/pangenome -p $CPUS $OUTWD/gff/*gff
	$FASTTREE -nt -gtr $OUTWD/pangenome/core_gene_alignment.aln > $OUTWD/pangenome/core_gene_alignment.newick
	$ROARY2SVG $OUTWD/pangenome/gene_presence_absence.csv --colour=Blue > $OUTWD/pangenome/pangenome.svg
	$CONVERT $OUTWD/pangenome/pangenome.svg $OUTWD/pangenome/pangenome.png
	rm -rf $OUTWD/gff
fi

### SPECIAL ANALYSIS

## ESCHERICHIA
if [ "$GENERA" == 'Escherichia' ]; then
	# Serotyping
	echo -e "Serotyping started at: \c" >> $OUTWD/tormes.log
        date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
	mkdir -p $OUTWD/serotyping
	for i in $SAMPLE; do
            mkdir -p $OUTWD/serotyping/$i
	    python $SEROTYPEFINDER -p $SEROTYPEFINDERDB -mp $BLASTBINS/blastn -i $OUTWD/draft_genomes/$i.fasta -o $OUTWD/serotyping/$i -x 
	    for j in H O; do
		cut -f 3 -d $'\t' $OUTWD/serotyping/$i/results_tab.tsv | grep "$j" >> $OUTWD/serotyping/$i/$j\_temp
		for k in $(<$OUTWD/serotyping/$i/$j\_temp); do
		    grep "$k" $OUTWD/serotyping/$i/results_tab.tsv >> $OUTWD/serotyping/$i/$j\_temp2
		done
	    	sort -u -k2 -rn $OUTWD/serotyping/$i/$j\_temp2 | head -n 1 | awk '{print $3}' > $OUTWD/serotyping/$i/$j\_temp3
	    done
	    echo $i > $OUTWD/serotyping/$i/temp4
            paste -d $'\t' $OUTWD/serotyping/$i/temp4 $OUTWD/serotyping/$i/H_temp3 $OUTWD/serotyping/$i/O_temp3 > $OUTWD/serotyping/$i/$i\_serotype
            cat $OUTWD/serotyping/$i/$i\_serotype >> $OUTWD/serotyping/serotyping.txt
            rm -f $OUTWD/serotyping/$i/*temp*
	done
	sed -i "1iISOLATE${TAB}H-antigen${TAB}O-antigen" $OUTWD/serotyping/serotyping.txt

	# FimH-typing
	echo -e "FimH typing started at: \c" >> $OUTWD/tormes.log
        date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
	mkdir -p $OUTWD/fimH_typing
	for i in $SAMPLE; do
	    mkdir -p $OUTWD/fimH_typing/$i
	    $FIMTYPER -d $FIMTYPERDB -b $BLASTBINS/../ -i $OUTWD/draft_genomes/$i\.fasta -o $OUTWD/fimH_typing/$i -k 95.00 -l 0.80
	    sed "s/^FimH/$i${TAB}FimH/" $OUTWD/fimH_typing/$i/results_tab.txt | head -n 1 >> $OUTWD/fimH_typing/fimH_typing.txt
	done

	# PlasmidFinder
	echo -e "Plasmid search started at: \c" >> $OUTWD/tormes.log
        date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
	mkdir -p $OUTWD/plasmids
	$PARALLEL -j $CPUS -a $OUTWD/list.tmp --results $OUTWD/plasmids/{}\_plasmids.tab $ABRICATE $OUTWD/draft_genomes/{}.fasta --db plasmidfinder --nopath
        rm -f $OUTWD/plasmids/*err $OUTWD/plasmids/*seq
	for i in $SAMPLE; do
	    sed -i 's/.fasta//' $OUTWD/plasmids/$i\_plasmids.tab
        done

	# PointFinder
	echo -e "Point mutation search started at: \c" >> $OUTWD/tormes.log
        date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
	mkdir -p $OUTWD/point_mutations
	for i in $SAMPLE; do
	    mkdir -p $OUTWD/point_mutations/$i
	    python $POINTFINDER -i $OUTWD/draft_genomes/$i.fasta -p $POINTFINDERDB -m blastn -m_p $BLASTBINS/blastn -s escherichia_coli -o $OUTWD/point_mutations/$i
            rm -rf $OUTWD/point_mutations/$i/tmp
            echo "" >> $OUTWD/point_mutations/$i/${i}_blastn_results.tsv
	    mv -f $OUTWD/point_mutations/$i/${i}_blastn_results.tsv $OUTWD/point_mutations/$i/$i\_PointFinder_results.txt
	done
fi

## SALMONELLA
if [ "$GENERA" == 'Salmonella' ]; then
        # Serotyping
        echo -e "Serotyping started at: \c" >> $OUTWD/tormes.log
        date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
        mkdir -p $OUTWD/serotyping
	$PARALLEL -j $CPUS -a $OUTWD/list.tmp $SISTR --qc -f tab -o $OUTWD/serotyping/{}\_serotype.tab $OUTWD/draft_genomes/{}.fasta
	for i in $SAMPLE; do
	    tail -n+2 $OUTWD/serotyping/$i\_serotype.tab >> $OUTWD/temp1
	done
	awk -v OFS="$TAB" -F "$TAB" '{print $7,$5,$14,$13,$8,$9,$10,$12}' $OUTWD/temp1 | sed "1iISOLATE${TAB}SUBSPECIE${TAB}SEROVAR${TAB}SEROGROUP${TAB}H1${TAB}H2${TAB}O-ANTIGEN${TAB}QUALITY CONTROL" > $OUTWD/serotyping/serotyping.txt
	rm -f $OUTWD/temp1

        # PlasmidFinder
        echo -e "Plasmid search started at: \c" >> $OUTWD/tormes.log
        date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
        mkdir -p $OUTWD/plasmids
        $PARALLEL -j $CPUS -a $OUTWD/list.tmp --results $OUTWD/plasmids/{}\_plasmids.tab $ABRICATE $OUTWD/draft_genomes/{}.fasta --db plasmidfinder --nopath
        rm -f $OUTWD/plasmids/*err $OUTWD/plasmids/*seq
        for i in $SAMPLE; do
            sed -i 's/.fasta//' $OUTWD/plasmids/$i\_plasmids.tab
        done

        # PointFinder
        echo -e "Point mutation search started at: \c" >> $OUTWD/tormes.log
        date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
        mkdir -p $OUTWD/point_mutations
        for i in $SAMPLE; do
            mkdir -p $OUTWD/point_mutations/$i
            python $POINTFINDER -i $OUTWD/draft_genomes/$i.fasta -p $POINTFINDERDB -m blastn -m_p $BLASTBINS/blastn -s salmonella -o $OUTWD/point_mutations/$i
            rm -rf $OUTWD/point_mutations/$i/tmp
            echo "" >> $OUTWD/point_mutations/$i/${i}_blastn_results.tsv
            mv -f $OUTWD/point_mutations/$i/${i}_blastn_results.tsv $OUTWD/point_mutations/$i/$i\_PointFinder_results.txt
        done
fi

# TORMES REPORT
echo -e "Tormes report started at: \c" >> $OUTWD/tormes.log
date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log

if [ ! -z "$TITLEFILE" ]; then
	TITLE="$(<$TITLEFILE)"
else
	TITLE="$GENERA Analysis Performed on $DATE"
fi
echo $TITLE > $OUTWD/title_tormes.tmp
$TORMESREPORT $OUTWD $METADATA $ABRICATE $TORMESDIR $GENERA
echo -e "$RSCRIPT -e 'library(rmarkdown); rmarkdown::render(\"$OUTWD/report_files/tormes_report.Rmd\", \"html_document\", encoding=\"UTF-8\")'" > $OUTWD/render_report.sh
chmod 755 $OUTWD/render_report.sh
$OUTWD/render_report.sh

if [ -s $OUTWD/report_files/tormes_report.html ]; then
	cp -f $OUTWD/report_files/tormes_report.html $OUTWD/tormes_report.html
else
	echo -e "WARNING: html report file could not be created" >> $OUTWD/tormes.log
fi

tar cfz $OUTWD/report_files.tgz -C $OUTWD/ report_files
rm -f $OUTWD/render_report.sh
rm -rf $OUTWD/report_files

## Things to do before finishing
rm -f $OUTWD/list.tmp
#$PARALLEL -j $CPUS --gnu gzip ::: $OUTWD/cleaned_reads/*fastq
if [ -e $OUTWD/title_tormes.tmp ]; then
	rm -f $OUTWD/title_tormes.tmp
fi

echo -e "TORMES pipeline finished at: \c" >> $OUTWD/tormes.log
date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log

